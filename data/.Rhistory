for(k in 1:K){
if (min(dim(FF_comm[[k]])) == 1){
XX_comm[[k]] <- FF_comm[[k]] %*% t(BB_comm[[k]])
} else {
XX_comm[[k]] <- t(FF_comm[[k]]) %*% t(BB_comm[[k]])
}
if (min(dim(FF_uniq[[k]])) == 1){
XX_uniq[[k]] <- FF_uniq[[k]] %*% t(BB_uniq[[k]])
} else {
XX_uniq[[k]] <- t(FF_uniq[[k]]) %*% t(BB_uniq[[k]])
}
XX_total[[k]] <- XX_comm[[k]] + XX_uniq[[k]] + t(EE[[k]])
df_JIVE_unscaled[[k]] <-  scale(XX_total[[k]], center = TRUE, scale = FALSE)
df_JIVE[[k]] <- scale(XX_total[[k]], center = TRUE, scale = TRUE)
attr[[k]] <- attributes(df_JIVE[[k]])
}
names(df_JIVE) <- paste0("subj",1:K)
names(df_JIVE_unscaled) <- paste0("subj",1:K)
return(list(df_JIVE = df_JIVE, df_JIVE_unscaled = df_JIVE_unscaled, attr = attr,
XX_total = XX_total, XX_comm = XX_comm, XX_uniq = XX_uniq,
BB_comm = BB_comm, BB_uniq = BB_uniq, FF_comm = FF_comm, FF_uniq = FF_uniq))
}
## 1: sigma_eta = 0.1, sigma_EE = 0.1 and negative phi's
set.seed(1234)
Opt3_e1_EE_1_neg <- sim_model(T = 100, K = 3, d = 10,
R_joint = 2, R_uniq = c(2,2,2), scale_comm = -0.7, scale_uniq = -0.7,
sigma_eta = 1, sigma_EE = 1, Option = 3)
Opt3_e1_EE_1_neg$df_JIVE
# clear workspace
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(r.jive)
#devtools::install_github("idc9/r_jive")
library(ajive)
indir <- paste0(getwd(), "/")
sim_model <- function(T, K, d, R_joint, R_uniq,
scale_comm, scale_uniq, sigma_eta, sigma_EE, Option){
BB_comm_min <- 1
BB_comm_max <- 3
BB_uniq_min <- 1
BB_uniq_max <- 3
Burning <- 500 # Burning period
# Generate factor series (score) F_t for all individuals:
Phi_comm <- sapply(rep(R_joint,K),function(x){replicate(1,diag(scale_comm,x), simplify = F)})
Phi_uniq <- sapply(R_uniq,function(x){replicate(1,diag(scale_uniq,x), simplify = F)})
FF_comm <- lapply(rep(R_joint,K),function(x){matrix(0,x,Burning+T)})
FF_uniq <- lapply(R_uniq,function(x){matrix(0,x,Burning+T)})
# Noise eta_t for factor series:
Eta <- lapply(c(rep(R_joint,K),R_uniq),
function(x) t(mvtnorm::rmvnorm((Burning+T),rep(0,x),diag(sigma_eta,x))))
# Generate factor series F_t:
for(t in 1:(Burning+T)){
if(t == 1){
for(k in 1:K){
FF_comm[[k]][,t] <- Phi_comm[[k]] %*% Eta[[k]][,t]
FF_uniq[[k]][,t] <- Phi_uniq[[k]] %*% Eta[[k+3]][,t]
}
}else {
for(k in 1:K){
FF_comm[[k]][,t] <- Phi_comm[[k]] %*% FF_comm[[k]][,t-1] + Eta[[k]][,t]
FF_uniq[[k]][,t] <- Phi_uniq[[k]] %*% FF_uniq[[k]][,t-1] + Eta[[k+K]][,t]
}
}
}
# Truncate the burning period realizations:
for (k in 1:K){
FF_comm[[k]] = as.matrix(FF_comm[[k]][,(Burning+1):(Burning+T)],T,R_joint)
FF_uniq[[k]] = as.matrix(FF_uniq[[k]][,(Burning+1):(Burning+T)],T,R_uniq[k])
}
# Same factor series?
if (Option == 1 & Option == 2){
for (k in 2:K){
FF_comm[[k]] <- FF_comm[[1]]
}
}
# Generate observations for all individuals:
# Loading matrices:
BB_comm <- lapply(rep(R_joint,K),function(x){matrix(0,d,x)})
BB_uniq <- lapply(R_uniq,function(x){matrix(0,d,x)})
BB_comm[[1]] <- matrix(cbind(c(runif(4,BB_comm_min,BB_comm_max),rep(0,6)),
c(runif(4,BB_comm_min,BB_comm_max),rep(0,6))),d,R_joint)
BB_comm[[2]] <- matrix(cbind(c(runif(4,BB_comm_min,BB_comm_max),rep(0,6)),
c(runif(4,BB_comm_min,BB_comm_max),rep(0,6))),d,R_joint)
BB_comm[[3]] <- matrix(cbind(c(runif(4,BB_comm_min,BB_comm_max),rep(0,6)),
c(runif(4,BB_comm_min,BB_comm_max),rep(0,6))),d,R_joint)
BB_uniq[[1]]  <- matrix(cbind(c(rep(0,4),runif(2,BB_uniq_min,BB_uniq_max),rep(0,4)),
c(rep(0,4),runif(2,BB_uniq_min,BB_uniq_max),rep(0,4))),d,R_uniq[1])
BB_uniq[[2]]  <- matrix(cbind(c(rep(0,6),runif(2,BB_uniq_min,BB_uniq_max),rep(0,2)),
c(rep(0,6),runif(2,BB_uniq_min,BB_uniq_max),rep(0,2))),d,R_uniq[2])
BB_uniq[[3]]  <- matrix(cbind(c(rep(0,8),runif(2,BB_uniq_min,BB_uniq_max)),
c(rep(0,8),runif(2,BB_uniq_min,BB_uniq_max))),d,R_uniq[3])
if (Option == 1 & Option == 3){
for (k in 2:K){
BB_comm[[k]] <- BB_comm[[1]]
}
}
EE <- replicate(K,t(mvtnorm::rmvnorm(T,rep(0,d),diag(sigma_EE,d))),FALSE)
# Observation X_k:
XX_comm <- replicate(K,matrix(0,T,d),FALSE)
XX_uniq <- replicate(K,matrix(0,T,d),FALSE)
XX_total <- replicate(K,matrix(0,T,d),FALSE)
df_JIVE <- list()
attr <- list()
df_JIVE_unscaled <- list()
for(k in 1:K){
if (min(dim(FF_comm[[k]])) == 1){
XX_comm[[k]] <- FF_comm[[k]] %*% t(BB_comm[[k]])
} else {
XX_comm[[k]] <- t(FF_comm[[k]]) %*% t(BB_comm[[k]])
}
if (min(dim(FF_uniq[[k]])) == 1){
XX_uniq[[k]] <- FF_uniq[[k]] %*% t(BB_uniq[[k]])
} else {
XX_uniq[[k]] <- t(FF_uniq[[k]]) %*% t(BB_uniq[[k]])
}
XX_total[[k]] <- XX_comm[[k]] + XX_uniq[[k]] + t(EE[[k]])
df_JIVE_unscaled[[k]] <-  scale(XX_total[[k]], center = TRUE, scale = FALSE)
df_JIVE[[k]] <- scale(XX_total[[k]], center = TRUE, scale = TRUE)
attr[[k]] <- attributes(df_JIVE[[k]])
}
names(df_JIVE) <- paste0("subj",1:K)
names(df_JIVE_unscaled) <- paste0("subj",1:K)
return(list(df_JIVE = df_JIVE, df_JIVE_unscaled = df_JIVE_unscaled, attr = attr,
XX_total = XX_total, XX_comm = XX_comm, XX_uniq = XX_uniq,
BB_comm = BB_comm, BB_uniq = BB_uniq, FF_comm = FF_comm, FF_uniq = FF_uniq))
}
# Number of observations: T
# Number of subjects: K
# Number of variables: d
# Rank for joint factor series: R_joint
# Ranks for unique factor series: R_uniq
## 1: sigma_eta = 0.1, sigma_EE = 0.1
set.seed(1234)
Opt3_e01_EE_01 <- sim_model(T = 100, K = 3, d = 10,
R_joint = 2, R_uniq = c(2,2,2), scale_comm = 0.7, scale_uniq = 0.7,
sigma_eta = 0.1, sigma_EE = 0.1, Option = 3)
fit_JIVE_Opt3_e01_EE_01 <- jive(Opt3_e01_EE_01$df_JIVE,
rankJ=2, rankA=c(2,2,2), method="given",
scale=FALSE, center=FALSE, orthIndiv=FALSE, maxiter=10000)
## 1: sigma_eta = 0.1, sigma_EE = 0.1
set.seed(1234)
Opt3_e01_EE_01 <- sim_model(T = 100, K = 3, d = 10,
R_joint = 2, R_uniq = c(2,2,2), scale_comm = 0.7, scale_uniq = 0.7,
sigma_eta = 0.1, sigma_EE = 0.1, Option = 3)
# clear workspace
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(r.jive)
#devtools::install_github("idc9/r_jive")
library(ajive)
indir <- paste0(getwd(), "/")
sim_model <- function(T, K, d, R_joint, R_uniq,
scale_comm, scale_uniq, sigma_eta, sigma_EE, Option){
BB_comm_min <- 1
BB_comm_max <- 3
BB_uniq_min <- 1
BB_uniq_max <- 3
Burning <- 500 # Burning period
# Generate factor series (score) F_t for all individuals:
Phi_comm <- sapply(rep(R_joint,K),function(x){replicate(1,diag(scale_comm,x), simplify = F)})
Phi_uniq <- sapply(R_uniq,function(x){replicate(1,diag(scale_uniq,x), simplify = F)})
FF_comm <- lapply(rep(R_joint,K),function(x){matrix(0,x,Burning+T)})
FF_uniq <- lapply(R_uniq,function(x){matrix(0,x,Burning+T)})
# Noise eta_t for factor series:
Eta <- lapply(c(rep(R_joint,K),R_uniq),
function(x) t(mvtnorm::rmvnorm((Burning+T),rep(0,x),diag(sigma_eta,x))))
# Generate factor series F_t:
for(t in 1:(Burning+T)){
if(t == 1){
for(k in 1:K){
FF_comm[[k]][,t] <- Phi_comm[[k]] %*% Eta[[k]][,t]
FF_uniq[[k]][,t] <- Phi_uniq[[k]] %*% Eta[[k+3]][,t]
}
}else {
for(k in 1:K){
FF_comm[[k]][,t] <- Phi_comm[[k]] %*% FF_comm[[k]][,t-1] + Eta[[k]][,t]
FF_uniq[[k]][,t] <- Phi_uniq[[k]] %*% FF_uniq[[k]][,t-1] + Eta[[k+K]][,t]
}
}
}
# Truncate the burning period realizations:
for (k in 1:K){
FF_comm[[k]] = as.matrix(FF_comm[[k]][,(Burning+1):(Burning+T)],T,R_joint)
FF_uniq[[k]] = as.matrix(FF_uniq[[k]][,(Burning+1):(Burning+T)],T,R_uniq[k])
}
# Same factor series?
if (Option == 1 & Option == 2){
for (k in 2:K){
FF_comm[[k]] <- FF_comm[[1]]
}
}
# Generate observations for all individuals:
# Loading matrices:
BB_comm <- lapply(rep(R_joint,K),function(x){matrix(0,d,x)})
BB_uniq <- lapply(R_uniq,function(x){matrix(0,d,x)})
BB_comm[[1]] <- matrix(cbind(c(runif(4,BB_comm_min,BB_comm_max),rep(0,6)),
c(runif(4,BB_comm_min,BB_comm_max),rep(0,6))),d,R_joint)
BB_comm[[2]] <- matrix(cbind(c(runif(4,BB_comm_min,BB_comm_max),rep(0,6)),
c(runif(4,BB_comm_min,BB_comm_max),rep(0,6))),d,R_joint)
BB_comm[[3]] <- matrix(cbind(c(runif(4,BB_comm_min,BB_comm_max),rep(0,6)),
c(runif(4,BB_comm_min,BB_comm_max),rep(0,6))),d,R_joint)
BB_uniq[[1]]  <- matrix(cbind(c(rep(0,4),runif(2,BB_uniq_min,BB_uniq_max),rep(0,4)),
c(rep(0,4),runif(2,BB_uniq_min,BB_uniq_max),rep(0,4))),d,R_uniq[1])
BB_uniq[[2]]  <- matrix(cbind(c(rep(0,6),runif(2,BB_uniq_min,BB_uniq_max),rep(0,2)),
c(rep(0,6),runif(2,BB_uniq_min,BB_uniq_max),rep(0,2))),d,R_uniq[2])
BB_uniq[[3]]  <- matrix(cbind(c(rep(0,8),runif(2,BB_uniq_min,BB_uniq_max)),
c(rep(0,8),runif(2,BB_uniq_min,BB_uniq_max))),d,R_uniq[3])
if (Option == 1 & Option == 3){
for (k in 2:K){
BB_comm[[k]] <- BB_comm[[1]]
}
}
EE <- replicate(K,t(mvtnorm::rmvnorm(T,rep(0,d),diag(sigma_EE,d))),FALSE)
# Observation X_k:
XX_comm <- replicate(K,matrix(0,T,d),FALSE)
XX_uniq <- replicate(K,matrix(0,T,d),FALSE)
XX_total <- replicate(K,matrix(0,T,d),FALSE)
df_JIVE <- list()
attr <- list()
df_JIVE_unscaled <- list()
for(k in 1:K){
if (min(dim(FF_comm[[k]])) == 1){
XX_comm[[k]] <- FF_comm[[k]] %*% t(BB_comm[[k]])
} else {
XX_comm[[k]] <- t(FF_comm[[k]]) %*% t(BB_comm[[k]])
}
if (min(dim(FF_uniq[[k]])) == 1){
XX_uniq[[k]] <- FF_uniq[[k]] %*% t(BB_uniq[[k]])
} else {
XX_uniq[[k]] <- t(FF_uniq[[k]]) %*% t(BB_uniq[[k]])
}
XX_total[[k]] <- XX_comm[[k]] + XX_uniq[[k]] + t(EE[[k]])
df_JIVE_unscaled[[k]] <-  scale(XX_total[[k]], center = TRUE, scale = FALSE)
df_JIVE[[k]] <- scale(XX_total[[k]], center = TRUE, scale = TRUE)
attr[[k]] <- attributes(df_JIVE[[k]])
}
names(df_JIVE) <- paste0("subj",1:K)
names(df_JIVE_unscaled) <- paste0("subj",1:K)
return(list(df_JIVE = df_JIVE, df_JIVE_unscaled = df_JIVE_unscaled, attr = attr,
XX_total = XX_total, XX_comm = XX_comm, XX_uniq = XX_uniq,
BB_comm = BB_comm, BB_uniq = BB_uniq, FF_comm = FF_comm, FF_uniq = FF_uniq))
}
fit_JIVE_test <- jive(test.data$df_JIVE,
rankJ=2, rankA=c(2,2,2), method="given",
scale=FALSE, center=FALSE, orthIndiv=FALSE, maxiter=10000)
set.seed(1234)
test.data <- sim_model(T = 100, K = 3, d = 10,
R_joint = 2, R_uniq = c(2,2,2), scale_comm = 0.7, scale_uniq = 0.7,
sigma_eta = 0.1, sigma_EE = 0.1, Option = 3)
fit_JIVE_test <- jive(test.data$df_JIVE,
rankJ=2, rankA=c(2,2,2), method="given",
scale=FALSE, center=FALSE, orthIndiv=FALSE, maxiter=10000)
showHeatmaps(fit_JIVE_test, order_by = -1, show_all=TRUE)
fit_JIVE_test <- ajive(test.data$df_JIVE,
initial_signal_ranks = c(4,4,4), n_wedin_samples = 1000,
n_rand_dir_samples = 1000, full = TRUE, joint_rank = 2)
decomposition_heatmaps(test.data, fit_JIVE_test)
decomposition_heatmaps(test.data$df_JIVE, fit_JIVE_test)
decomposition_heatmaps(test.data$df_JIVE, fit_JIVE_test)
fit_JIVE_test$joint_scores
# Estimated joint rank:
fit_JIVE_test$rankJ
# Estimated individual ranks:
fit_JIVE_test$rankA
showHeatmaps(fit_JIVE_test, order_by = -1, show_all=TRUE)
fit_JIVE_test <- jive(test.data$df_JIVE,
rankJ=2, rankA=c(2,2,2), method="given",
scale=FALSE, center=FALSE, orthIndiv=FALSE, maxiter=10000)
# Estimated joint rank:
fit_JIVE_test$rankJ
# Estimated individual ranks:
fit_JIVE_test$rankA
fit_JIVE_test <- ajive(test.data$df_JIVE,
initial_signal_ranks = c(4,4,4), n_wedin_samples = 1000,
n_rand_dir_samples = 1000, full = TRUE, joint_rank = 2)
# Estimated joint rank:
fit_AJIVE_test$joint_rank
fit_JIVE_test <- jive(test.data$df_JIVE,
rankJ=2, rankA=c(2,2,2), method="given",
scale=FALSE, center=FALSE, orthIndiv=FALSE, maxiter=10000)
fit_AJIVE_test <- ajive(test.data$df_JIVE,
initial_signal_ranks = c(4,4,4), n_wedin_samples = 1000,
n_rand_dir_samples = 1000, full = TRUE, joint_rank = 2)
# Estimated joint rank:
fit_JIVE_test$rankJ
# Estimated individual ranks:
fit_JIVE_test$rankA
# Estimated joint rank:
fit_AJIVE_test$joint_rank
# Estimated individual ranks:
fit_AJIVE_test[["block_decomps"]][[1]][["individual"]][["rank"]]
fit_AJIVE_test[["block_decomps"]][[2]][["individual"]][["rank"]]
fit_AJIVE_test[["block_decomps"]][[3]][["individual"]][["rank"]]
showHeatmaps(fit_JIVE_test, order_by = -1, show_all=TRUE)
decomposition_heatmaps(test.data$df_JIVE, fit_JIVE_test)
test.data$df_JIVE
fit_JIVE_test
decomposition_heatmaps(test.data$df_JIVE, fit_AJIVE_test)
decomposition_heatmaps(test.data$df_JIVE, fit_AJIVE_test)
?ajive
ajive
get_svd
get_sv_threshold
setwd("D:/High-dimensional time series/multifac/ABIDE/data")
data.raw <- list()
data.raw[[1]] <- read.csv("Caltech_0051456_ccs_filt_noglobal_rois_dosenbach160.csv")
data.raw[[2]] <- read.csv("CMU_a_0050642_ccs_filt_noglobal_rois_dosenbach160.csv")
data.raw[[3]] <- read.csv("KKI_0050772_ccs_filt_noglobal_rois_dosenbach160.csv")
colnames(data.raw[[1]]) <- NULL
colnames(data.raw[[2]]) <- NULL
colnames(data.raw[[3]]) <- NULL
D <- 160
XX_data <- list()
XX_data_unscaled <- list()
dim_T <- vector("numeric",3)
attr <- list()
for (k in 1:3){
XX_data_unscaled[[k]] <- t(data.raw[[k]][,1:D])
XX_data[[k]] <- t (scale( t(XX_data_unscaled[[k]]), center = TRUE, scale = TRUE))
dim_T[k] <- dim(XX_data[[k]])[2]
attr[[k]] <- attributes(XX_data[[k]])
}
dim_T
T = min(dim_T)
XX_data[[1]][is.nan(XX_data[[1]])] <- 0
XX_data[[2]][is.nan(XX_data[[2]])] <- 0
XX_data[[3]][is.nan(XX_data[[3]])] <- 0
for (k in 1:3){
XX_data_unscaled[[k]] <- XX_data_unscaled[[k]][,1:T]
XX_data[[k]] <- XX_data[[k]][,1:T]
}
## Test:
for (k in 1:3){
XX_data[[k]] <- t(XX_data[[k]])
}
plot(log(svd(XX_data[[1]])$d),type="l",col="black",ylab="log-scaled singular values")
# clear workspace
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(r.jive)
#devtools::install_github("idc9/r_jive")
library(ajive)
indir <- paste0(getwd(), "/")
setwd("D:/High-dimensional time series/multifac/ABIDE/data")
data.raw <- list()
data.raw[[1]] <- read.csv("Caltech_0051456_ccs_filt_noglobal_rois_dosenbach160.csv")
data.raw[[2]] <- read.csv("CMU_a_0050642_ccs_filt_noglobal_rois_dosenbach160.csv")
data.raw[[3]] <- read.csv("KKI_0050772_ccs_filt_noglobal_rois_dosenbach160.csv")
colnames(data.raw[[1]]) <- NULL
colnames(data.raw[[2]]) <- NULL
colnames(data.raw[[3]]) <- NULL
D <- 160
XX_data <- list()
XX_data_unscaled <- list()
dim_T <- vector("numeric",3)
attr <- list()
for (k in 1:3){
XX_data_unscaled[[k]] <- t(data.raw[[k]][,1:D])
XX_data[[k]] <- t (scale( t(XX_data_unscaled[[k]]), center = TRUE, scale = TRUE))
dim_T[k] <- dim(XX_data[[k]])[2]
attr[[k]] <- attributes(XX_data[[k]])
}
dim_T
T = min(dim_T)
XX_data[[1]][is.nan(XX_data[[1]])] <- 0
XX_data[[2]][is.nan(XX_data[[2]])] <- 0
XX_data[[3]][is.nan(XX_data[[3]])] <- 0
for (k in 1:3){
XX_data_unscaled[[k]] <- XX_data_unscaled[[k]][,1:T]
XX_data[[k]] <- XX_data[[k]][,1:T]
}
## Test:
for (k in 1:3){
XX_data[[k]] <- t(XX_data[[k]])
}
plot(log(svd(XX_data[[1]])$d),type="l",col="black",ylab="log-scaled singular values")
lines(1:T,log(svd(XX_data[[2]])$d),type="l",col="red")
lines(1:T,log(svd(XX_data[[3]])$d),type="l",col="blue")
# Zoom in the first 50 largest:
plot(log(svd(XX_data[[1]])$d)[1:50],type="p",col="black",pch=0,ylab="log-scaled singular values")
lines(1:50,log(svd(XX_data[[2]])$d)[1:50],type="p",col="red",pch=1,cex=1.2)
lines(1:50,log(svd(XX_data[[3]])$d)[1:50],type="p",col="blue",pch=2,cex=1.5)
abline(a=3,b=0,lty=2)
abline(a=2,b=0,lty=2)
abline(a=1,b=0,lty=2)
# log-difference of consecutive is less than 0.01: log a - log b < 0.01 <=> a < e^(0.01)*b = a < 1.01*b
ind_rank = vector("numeric",3)
ind_rank[1] <- min( which(log(svd(XX_data[[1]])$d)[1:(T-1)] - log(svd(XX_data[[1]])$d)[2:T] < 0.01) )
ind_rank[2] <- min( which(log(svd(XX_data[[2]])$d)[1:(T-1)] - log(svd(XX_data[[2]])$d)[2:T] < 0.01) )
ind_rank[3] <- min( which(log(svd(XX_data[[3]])$d)[1:(T-1)] - log(svd(XX_data[[3]])$d)[2:T] < 0.01) )
ind_rank
# rankJ: If not given, this will be calculated using the chosen method. If the method is "given" then the default is 1.
# rankA: If the method is "given" then the default is rep(1, length(data)).
# method: Possible options are "given", "perm", and "bic". The default is "perm". If ranks are known, you should use "given".
# JIVE result:
fit_JIVE_real <-  jive(XX_data,
rankJ=NA, rankA=ind_rank, method="perm",
scale=FALSE, center=FALSE, orthIndiv=FALSE, maxiter=1000)
# Estimated joint rank:
fit_JIVE_real$rankJ
# Estimated individual ranks:
fit_JIVE_real$rankA
# This violates our model: B cannot be the same, since rank_J = 1.
fit_JIVE_real[["joint"]][[1]][1:10,1:10]
fit_JIVE_real[["joint"]][[2]][1:10,1:10]
fit_JIVE_real[["joint"]][[2]][1:10,1:10]
showHeatmaps(fit_JIVE_real, order_by = -1, show_all=TRUE)
# AJIVE result:
fit_AJIVE_real <- ajive(XX_data,
initial_signal_ranks = ind_rank, n_wedin_samples = 1000,
n_rand_dir_samples = 1000, full = TRUE, joint_rank = NA)
# Estimated joint rank:
fit_AJIVE_real$joint_rank
# Estimated individual ranks:
fit_AJIVE_real[["block_decomps"]][[1]][["individual"]][["rank"]]
fit_AJIVE_real[["block_decomps"]][[2]][["individual"]][["rank"]]
fit_AJIVE_real[["block_decomps"]][[3]][["individual"]][["rank"]]
fit_AJIVE_real$joint_scores[1:10,1:fit_AJIVE_real$joint_rank]
decomposition_heatmaps(XX_data, fit_AJIVE_real)
decomposition_heatmaps(XX_data, fit_AJIVE_real)
showHeatmaps(fit_JIVE_real, order_by = -1, show_all=TRUE)
dim(XX_data)
dim(XX_data[[1]])
lapply(XX_data,t())
lapply(XX_data,t
)
# AJIVE result:
fit_AJIVE_real <- ajive(lapply(XX_data,t),
initial_signal_ranks = ind_rank, n_wedin_samples = 1000,
n_rand_dir_samples = 1000, full = TRUE, joint_rank = NA)
# AJIVE result:
fit_AJIVE_real <- ajive(lapply(XX_data,t),
initial_signal_ranks = ind_rank, n_wedin_samples = 1000,
n_rand_dir_samples = 1000, full = TRUE, joint_rank = NA)
# Estimated joint rank:
fit_AJIVE_real$joint_rank
decomposition_heatmaps(lapply(XX_data,t), fit_AJIVE_real)
which(XX_data[[1]]==0)
setwd("D:/High-dimensional time series/multifac/ABIDE/data")
data.raw <- list()
data.raw[[1]] <- read.csv("Caltech_0051456_ccs_filt_noglobal_rois_dosenbach160.csv")
data.raw[[2]] <- read.csv("CMU_a_0050642_ccs_filt_noglobal_rois_dosenbach160.csv")
data.raw[[3]] <- read.csv("KKI_0050772_ccs_filt_noglobal_rois_dosenbach160.csv")
colnames(data.raw[[1]]) <- NULL
colnames(data.raw[[2]]) <- NULL
colnames(data.raw[[3]]) <- NULL
D <- 160
XX_data <- list()
XX_data_unscaled <- list()
dim_T <- vector("numeric",3)
attr <- list()
for (k in 1:3){
XX_data_unscaled[[k]] <- t(data.raw[[k]][,1:D])
XX_data[[k]] <- t (scale( t(XX_data_unscaled[[k]]), center = TRUE, scale = TRUE))
dim_T[k] <- dim(XX_data[[k]])[2]
attr[[k]] <- attributes(XX_data[[k]])
}
dim_T
T = min(dim_T)
XX_data[[1]][is.nan(XX_data[[1]])] <- 0
XX_data[[2]][is.nan(XX_data[[2]])] <- 0
XX_data[[3]][is.nan(XX_data[[3]])] <- 0
for (k in 1:3){
XX_data_unscaled[[k]] <- XX_data_unscaled[[k]][,1:T]
XX_data[[k]] <- XX_data[[k]][,1:T]
}
plot(log(svd(XX_data[[1]])$d),type="l",col="black",ylab="log-scaled singular values")
lines(1:T,log(svd(XX_data[[2]])$d),type="l",col="red")
lines(1:T,log(svd(XX_data[[3]])$d),type="l",col="blue")
# Zoom in the first 50 largest:
plot(log(svd(XX_data[[1]])$d)[1:50],type="p",col="black",pch=0,ylab="log-scaled singular values")
lines(1:50,log(svd(XX_data[[2]])$d)[1:50],type="p",col="red",pch=1,cex=1.2)
lines(1:50,log(svd(XX_data[[3]])$d)[1:50],type="p",col="blue",pch=2,cex=1.5)
abline(a=3,b=0,lty=2)
abline(a=2,b=0,lty=2)
abline(a=1,b=0,lty=2)
# log-difference of consecutive is less than 0.01: log a - log b < 0.01 <=> a < e^(0.01)*b = a < 1.01*b
ind_rank = vector("numeric",3)
ind_rank[1] <- min( which(log(svd(XX_data[[1]])$d)[1:(T-1)] - log(svd(XX_data[[1]])$d)[2:T] < 0.01) )
ind_rank[2] <- min( which(log(svd(XX_data[[2]])$d)[1:(T-1)] - log(svd(XX_data[[2]])$d)[2:T] < 0.01) )
ind_rank[3] <- min( which(log(svd(XX_data[[3]])$d)[1:(T-1)] - log(svd(XX_data[[3]])$d)[2:T] < 0.01) )
ind_rank
# JIVE result:
fit_JIVE_real <-  jive(XX_data_unscaled,
rankJ=NA, rankA=ind_rank, method="perm",
scale=FALSE, center=FALSE, orthIndiv=FALSE, maxiter=10000)
fit_JIVE_real <-  jive(XX_data,
rankJ=NA, rankA=ind_rank, method="perm",
scale=FALSE, center=FALSE, orthIndiv=FALSE, maxiter=10000)
# Estimated joint rank:
fit_JIVE_real$rankJ
# Estimated individual ranks:
fit_JIVE_real$rankA
# This violates our model: B cannot be the same, since rank_J = 1.
fit_JIVE_real[["joint"]][[1]][1:10,1:10]
fit_JIVE_real[["joint"]][[2]][1:10,1:10]
fit_JIVE_real[["joint"]][[2]][1:10,1:10]
showHeatmaps(fit_JIVE_real, order_by = -1, show_all=TRUE)
# AJIVE result:
fit_AJIVE_real <- ajive(XX_data,
initial_signal_ranks = ind_rank, n_wedin_samples = 1000,
n_rand_dir_samples = 1000, full = TRUE, joint_rank = NA)
# Estimated joint rank:
fit_AJIVE_real$joint_rank
# Estimated individual ranks:
fit_AJIVE_real[["block_decomps"]][[1]][["individual"]][["rank"]]
fit_AJIVE_real[["block_decomps"]][[2]][["individual"]][["rank"]]
fit_AJIVE_real[["block_decomps"]][[3]][["individual"]][["rank"]]
fit_AJIVE_real$joint_scores[1:10,1:fit_AJIVE_real$joint_rank]
decomposition_heatmaps(XX_data, fit_AJIVE_real)
save.image("D:/High-dimensional time series/multifac/JIVE_AJIVE_verify_V3_data.RData")
View(fit_AJIVE_real)
