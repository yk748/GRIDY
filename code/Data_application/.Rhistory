geom_tile()+
scale_fill_gradient2(name="Value",low=colorRampPalette(brewer.pal(3,"Set1"))(3)[2],
high=colorRampPalette(brewer.pal(3,"Set1"))(3)[1]) +
scale_y_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$row)),
breaks = unique(as.factor(df_GRIDY_tr_group1$row))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
scale_x_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$column)),
breaks = unique(as.factor(df_GRIDY_tr_group1$column))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
theme(legend.text=element_text(size=7),legend.position="bottom",
axis.text.x=element_text(size=8,angle=45,vjust=0.5,color=color_idx),
axis.text.y=element_text(size=8,color=color_idx))
GRIDY_group2_tr <- ggplot(df_GRIDY_tr_group2,aes(x=as.factor(row),y=as.factor(column),fill=value))+
geom_tile()+
scale_fill_gradient2(name="Value",low=colorRampPalette(brewer.pal(3,"Set1"))(3)[2],
high=colorRampPalette(brewer.pal(3,"Set1"))(3)[1]) +
scale_y_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group2$row)),
breaks = unique(as.factor(df_GRIDY_tr_group2$row))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
scale_x_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group2$column)),
breaks = unique(as.factor(df_GRIDY_tr_group2$column))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
theme(legend.text=element_text(size=7),legend.position="bottom",
axis.text.x=element_text(size=8,angle=45,vjust=0.5,color=color_idx),
axis.text.y=element_text(size=8,color=color_idx))
GRIDY_group1_error <- ggplot(df_GRIDY_error_group1,aes(x=as.factor(row),y=as.factor(column),fill=value))+
geom_tile()+
scale_fill_gradient2(name="Value",low=colorRampPalette(brewer.pal(3,"Set1"))(3)[2],
high=colorRampPalette(brewer.pal(3,"Set1"))(3)[1]) +
scale_y_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_error_group1$row)),
breaks = unique(as.factor(df_GRIDY_error_group1$row))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
scale_x_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_error_group1$column)),
breaks = unique(as.factor(df_GRIDY_error_group1$column))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
theme(legend.text=element_text(size=7),legend.position="bottom",
axis.text.x=element_text(size=8,angle=45,vjust=0.5,color=color_idx),
axis.text.y=element_text(size=8,color=color_idx))
GRIDY_group2_error <- ggplot(df_GRIDY_error_group2,aes(x=as.factor(row),y=as.factor(column),fill=value))+
geom_tile()+
scale_fill_gradient2(name="Value",low=colorRampPalette(brewer.pal(3,"Set1"))(3)[2],
high=colorRampPalette(brewer.pal(3,"Set1"))(3)[1]) +
scale_y_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_error_group2$row)),
breaks = unique(as.factor(df_GRIDY_error_group2$row))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
scale_x_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_error_group2$column)),
breaks = unique(as.factor(df_GRIDY_error_group2$column))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
theme(legend.text=element_text(size=7),legend.position="bottom",
axis.text.x=element_text(size=8,angle=45,vjust=0.5,color=color_idx),
axis.text.y=element_text(size=8,color=color_idx))
# -----------------------------------------------------------------------------#
# Saving Figure 10
# -----------------------------------------------------------------------------#
pdf(file = "./Figure10.pdf", width = 11.5, height = 10.5)
par(mar=c(0,0,0,0))
ggarrange(GRIDY_group1_tr,GRIDY_group2_tr,
GRIDY_group1_error,GRIDY_group2_error,
nrow=2,ncol=2,common.legend=TRUE,legend="bottom")
dev.off()
#-----------------------------------------------------------------------------#
# Code for producing Figure 7 in Data application section
#-----------------------------------------------------------------------------#
# -----------------------------------------------------------------------------#
# Preparation
# -----------------------------------------------------------------------------#
# Packages required
library(ggplot2)
library(latex2exp)
library(ggpubr)
#
# library(patchwork)
# library(reshape2)
# library(RColorBrewer)
# library(cowplot)
# library(grid)
# Load data from the previous step
load("./Data_final.RData")
# -----------------------------------------------------------------------------#
# Creating Figure 7
# -----------------------------------------------------------------------------#
# Making color labels for the ROIs:
color_table <- data.frame(color=c(rep("red",length(which(voxel_name_table$Net=="dfm"))),
rep("blue",length(which(voxel_name_table$Net=="fp"))),
rep("green",length(which(voxel_name_table$Net=="co"))),
rep("purple",length(which(voxel_name_table$Net=="sm"))),
rep("orange",length(which(voxel_name_table$Net=="cb"))),
rep("brown",length(which(voxel_name_table$Net=="oc")))),
ROI=c(which(voxel_name_table$Net=="dfm"),
which(voxel_name_table$Net=="fp"),
which(voxel_name_table$Net=="co"),
which(voxel_name_table$Net=="sm"),
which(voxel_name_table$Net=="cb"),
which(voxel_name_table$Net=="oc")))
color_table <- color_table[c(which(color_table$color=="red"),
which(color_table$color=="blue"),
which(color_table$color=="green"),
which(color_table$color=="purple"),
which(color_table$color=="orange"),
which(color_table$color=="brown")),]
# Plotting: This produces Figure 7
df_B_joint_1 <- data.frame(value = c(SCA_PF2_Joint$B[color_table$ROI,1],
SCA_P_Joint$B[color_table$ROI,1],
GICA_Joint$B[color_table$ROI,1]),
ROI = rep(color_table$ROI,3),
color = rep(color_table$color,3),
factor = rep(rep(1,160),3),
structure=rep(rep("Joint",160),3),
method=c(rep("GRIDY",160),rep("SCA-P",160),rep("GICA",160)))
df_B_joint_2 <- data.frame(value = c(SCA_PF2_Joint$B[color_table$ROI,2],
SCA_P_Joint$B[color_table$ROI,2],
GICA_Joint$B[color_table$ROI,2]),
ROI = color_table$ROI,
color = color_table$color,
factor = rep(rep(2,160),3),
structure=rep(rep("Joint",160),3),
method=c(rep("GRIDY",160),rep("SCA-P",160),rep("GICA",160)))
df_B_joint <- rbind(df_B_joint_1,df_B_joint_2)
df_B_joint$ROI <- factor(df_B_joint$ROI,levels=color_table$ROI)
df_B_joint$factor <- factor(df_B_joint$factor,levels=c(1,2),labels=c("Loadings 1","Loadings 2"))
df_B_group1_1 <- data.frame(value = c(SCA_PF2_Group1$B[color_table$ROI],
SCA_P_Group1$B[color_table$ROI],
GICA_Group1$B[color_table$ROI]),
ROI = rep(color_table$ROI,3),
color = rep(color_table$color,3),
factor = rep(rep(1,160),3),
structure=rep(rep("Group Individual 1",160),3),
method=c(rep("GRIDY",160),rep("SCA-P",160),rep("GICA",160)))
df_B_group1 <- rbind(df_B_group1_1)
df_B_group1$ROI <- factor(df_B_group1$ROI,levels=color_table$ROI)
df_B_group1$factor <- factor(df_B_group1$factor,levels=1,labels="Loadings 1")
df_B_group2_1 <- data.frame(value = c(SCA_PF2_Group2$B[color_table$ROI],
SCA_P_Group2$B[color_table$ROI],
GICA_Group2$B[color_table$ROI]),
ROI = rep(color_table$ROI,3),
color = rep(color_table$color,3),
factor = rep(rep(1,160),3),
structure=rep(rep("Group Individual 2",160),3),
method=c(rep("GRIDY",160),rep("SCA-P",160),rep("GICA",160)))
df_B_group2 <- rbind(df_B_group2_1)
df_B_group2$ROI <- factor(df_B_group2$ROI,levels=color_table$ROI)
df_B_group2$factor <- factor(df_B_group2$factor,levels=1,labels="Loadings 1")
df_B <- rbind(df_B_joint,df_B_group1,df_B_group2)
df_B$structure <- factor(df_B$structure,levels=c("Joint","Group Individual 1","Group Individual 2"))
df_B$method <- factor(df_B$method,levels=c("GRIDY","SCA-P","GICA"))
factor.labs <- c("Loadings 1","Loadings 2")
names(factor.labs) <- c("Loadings 1","Loadings 2")
structure.labs <- c("Joint", "Group Individual 1", "Group Individual 2")
names(structure.labs) <- c("Joint", "Group Individual 1", "Group Individual 2")
method.labs <- c("GRIDY", "SCA-P", "GICA")
names(method.labs) <- c("GRIDY", "SCA-P", "GICA")
# -----------------------------------------------------------------------------#
# Saving Figure 7
# -----------------------------------------------------------------------------#
pdf(file = "./Figure7.pdf", width = 11.5, height = 10.5)
par(mar=c(0,0,0,0))
ggplot(df_B,aes(x=as.factor(ROI),y=value,fill=color)) +
geom_bar(stat="identity") +
scale_fill_manual(name="Network",
labels=c("dfm","fp","co","sm","cb","oc"),
breaks=c("red","blue","green","purple","orange","brown"),
values=c("red","blue","green","purple","orange","brown")) +
scale_y_continuous(name="Value") +
theme(legend.position="bottom",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) + guides(fill = guide_legend(nrow = 1)) +
facet_grid(structure+factor~method,
labeller=labeller(structure=structure.labs,factor=factor.labs,method=method.labs))
dev.off()
# -----------------------------------------------------------------------------#
# Running rank selection
# -----------------------------------------------------------------------------#
# Packages required
library(pracma)
load("D:/High-dimensional time series/multifac/GRIDY (Submitted)/code/Data_application/Data_final.RData")
color_table
# -----------------------------------------------------------------------------#
# Creating Figure 10
# -----------------------------------------------------------------------------#
# Making color labels for the ROIs:
color_table <- data.frame(color=c(rep("red",length(which(voxel_name_table$Net=="dfm"))),
rep("blue",length(which(voxel_name_table$Net=="fp"))),
rep("green",length(which(voxel_name_table$Net=="co"))),
rep("purple",length(which(voxel_name_table$Net=="sm"))),
rep("orange",length(which(voxel_name_table$Net=="cb"))),
rep("brown",length(which(voxel_name_table$Net=="oc")))),
ROI=c(which(voxel_name_table$Net=="dfm"),
which(voxel_name_table$Net=="fp"),
which(voxel_name_table$Net=="co"),
which(voxel_name_table$Net=="sm"),
which(voxel_name_table$Net=="cb"),
which(voxel_name_table$Net=="oc")))
color_table <- color_table[c(which(color_table$color=="red"),
which(color_table$color=="blue"),
which(color_table$color=="green"),
which(color_table$color=="purple"),
which(color_table$color=="orange"),
which(color_table$color=="brown")),]
color_table
voxel_name_table
voxel_name_table$Network
# VAR construction
GRIDY_tr_joint <- GRIDY_tr_group  <-list()
GRIDY_error_joint <- GRIDY_error_group <- list()
for (kk in 1:(length(K1_idx)+length(K2_idx))){
T_k <- dim(X_scale_ext[[kk]])[2]
GRIDY_tr_joint[[kk]] <- SCA_PF2_Joint$B %*% GRIDY_YK$Psi_joint_hat[,,kk] %*% solve(t(SCA_PF2_Joint$B) %*% SCA_PF2_Joint$B) %*% t(SCA_PF2_Joint$B)
if (kk <= length(K1_idx)){
GRIDY_tr_group[[kk]] <- SCA_PF2_Group1$B %*% GRIDY_YK$Psi_indiv1_hat[,,kk] %*% solve(t(SCA_PF2_Group1$B) %*% SCA_PF2_Group1$B) %*% t(SCA_PF2_Group1$B)
}else{
GRIDY_tr_group[[kk]] <- SCA_PF2_Group2$B %*% GRIDY_YK$Psi_indiv2_hat[,,(kk-length(K1_idx))] %*% solve(t(SCA_PF2_Group2$B) %*% SCA_PF2_Group2$B) %*% t(SCA_PF2_Group2$B)
}
GRIDY_error_joint[[kk]] <- GRIDY_tr_joint[[kk]] %*% (diag(1,160) + (t(GRIDY_refitted$noise_refitted[[kk]]) %*% GRIDY_refitted$noise_refitted[[kk]]) / T_k) + SCA_PF2_Joint$B %*% GRIDY_YK$Eta_joint_hat[,,kk] %*% t(SCA_PF2_Joint$B)
if (kk <= length(K1_idx)){
GRIDY_error_group[[kk]] <- GRIDY_tr_group[[kk]] %*% (diag(1,160) + (t(GRIDY_refitted$noise_refitted[[kk]]) %*% GRIDY_refitted$noise_refitted[[kk]]) / T_k) + SCA_PF2_Group1$B %*% GRIDY_YK$Eta_indiv1_hat[,,kk] %*% t(SCA_PF2_Group1$B)
}else{
GRIDY_error_group[[kk]] <- GRIDY_tr_group[[kk]] %*% (diag(1,160) + (t(GRIDY_refitted$noise_refitted[[kk]]) %*% GRIDY_refitted$noise_refitted[[kk]]) / T_k) + SCA_PF2_Group2$B %*% GRIDY_YK$Eta_indiv2_hat[,,(kk-length(K1_idx))] %*% t(SCA_PF2_Group2$B)
}
}
GRIDY_tr_group1 <- array(0,dim=c(160,160))
GRIDY_tr_group2 <- array(0,dim=c(160,160))
GRIDY_error_group1 <- array(0,dim=c(160,160))
GRIDY_error_group2 <- array(0,dim=c(160,160))
for (kk in 1:(length(K1_idx)+length(K2_idx))){
if (kk <= length(K1_idx)){
GRIDY_tr_group1 <- GRIDY_tr_group1 + GRIDY_tr_joint[[kk]]/length(K1_idx) + GRIDY_tr_group[[kk]]/length(K1_idx)
GRIDY_error_group1 <- GRIDY_error_group1 + GRIDY_error_joint[[kk]]/length(K1_idx) + GRIDY_error_group[[kk]]/length(K1_idx)
}else{
GRIDY_tr_group2 <- GRIDY_tr_group2 + GRIDY_tr_joint[[kk]]/length(K2_idx) + GRIDY_tr_group[[kk]]/length(K2_idx)
GRIDY_error_group2 <- GRIDY_error_group2 + GRIDY_error_joint[[kk]]/length(K2_idx) + GRIDY_error_group[[kk]]/length(K2_idx)
}
}
data.frame(value=as.vector(GRIDY_tr_group1[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160))
color_table$ROI
voxel_name_table
voxel_name_table$Network[color_table$ROI]
voxel_name_table$Network[color_table$ROI]
rep(voxel_name_table$Network[color_table$ROI],160)
length(rep(voxel_name_table$Network[color_table$ROI],160))
# Plotting: This produces Figure 10
df_GRIDY_tr_group1 <- data.frame(value=as.vector(GRIDY_tr_group1[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160),
ROI=rep(voxel_name_table$Network[color_table$ROI],160))
df_GRIDY_tr_group2 <- data.frame(value=as.vector(GRIDY_tr_group2[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160),
ROI=rep(voxel_name_table$Network[color_table$ROI],160))
df_GRIDY_error_group1 <- data.frame(value=as.vector(GRIDY_error_group1[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160),
ROI=rep(voxel_name_table$Network[color_table$ROI],160))
df_GRIDY_error_group2 <- data.frame(value=as.vector(GRIDY_error_group2[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160),
ROI=rep(voxel_name_table$Network[color_table$ROI],160))
df_GRIDY_tr_group1$row <- factor(df_GRIDY_tr_group1$row,levels=unique(df_GRIDY_tr_group1$row))
df_GRIDY_tr_group2$row <- factor(df_GRIDY_tr_group2$row,levels=unique(df_GRIDY_tr_group2$row))
df_GRIDY_error_group1$row <- factor(df_GRIDY_error_group1$row,levels=unique(df_GRIDY_error_group1$row))
df_GRIDY_error_group2$row <- factor(df_GRIDY_error_group2$row,levels=unique(df_GRIDY_error_group2$row))
df_GRIDY_tr_group1$column <- factor(df_GRIDY_tr_group1$column,levels=unique(df_GRIDY_tr_group1$column))
df_GRIDY_tr_group2$column <- factor(df_GRIDY_tr_group2$column,levels=unique(df_GRIDY_tr_group2$column))
df_GRIDY_error_group1$column <- factor(df_GRIDY_error_group1$column,levels=unique(df_GRIDY_error_group1$column))
df_GRIDY_error_group2$column <- factor(df_GRIDY_error_group2$column,levels=unique(df_GRIDY_error_group2$column))
df_GRIDY_tr_group1$ROI <- factor(df_GRIDY_tr_group1$ROI,levels=unique(df_GRIDY_tr_group1$ROI))
df_GRIDY_tr_group2$ROI <- factor(df_GRIDY_tr_group2$ROI,levels=unique(df_GRIDY_tr_group2$ROI))
df_GRIDY_error_group1$ROI <- factor(df_GRIDY_error_group1$ROI,levels=unique(df_GRIDY_error_group1$ROI))
df_GRIDY_error_group2$ROI <- factor(df_GRIDY_error_group2$ROI,levels=unique(df_GRIDY_error_group2$ROI))
ggplot(df_GRIDY_tr_group1,aes(x=as.factor(row),y=as.factor(column),
fill=value,color=ROI))+
geom_tile()+
scale_fill_gradient2(name="Value",low=colorRampPalette(brewer.pal(3,"Set1"))(3)[2],
high=colorRampPalette(brewer.pal(3,"Set1"))(3)[1]) +
scale_fill_manual(name="Network",
labels=c("dfm","fp","co","sm","cb","oc"),
breaks=c("red","blue","green","purple","orange","brown"),
values=c("red","blue","green","purple","orange","brown")) +
scale_y_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$row)),
breaks = unique(as.factor(df_GRIDY_tr_group1$row))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
scale_x_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$column)),
breaks = unique(as.factor(df_GRIDY_tr_group1$column))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
theme(legend.text=element_text(size=7),legend.position="bottom",
axis.text.x=element_text(size=8,angle=45,vjust=0.5,color=color_idx),
axis.text.y=element_text(size=8,color=color_idx))
# Packages required
library(ggplot2)
library(latex2exp)
library(ggpubr)
library(RColorBrewer)
library(reshape2)
ggplot(df_GRIDY_tr_group1,aes(x=as.factor(row),y=as.factor(column),
fill=value,color=ROI))+
geom_tile()+
scale_fill_gradient2(name="Value",low=colorRampPalette(brewer.pal(3,"Set1"))(3)[2],
high=colorRampPalette(brewer.pal(3,"Set1"))(3)[1]) +
scale_fill_manual(name="Network",
labels=c("dfm","fp","co","sm","cb","oc"),
breaks=c("red","blue","green","purple","orange","brown"),
values=c("red","blue","green","purple","orange","brown")) +
scale_y_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$row)),
breaks = unique(as.factor(df_GRIDY_tr_group1$row))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
scale_x_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$column)),
breaks = unique(as.factor(df_GRIDY_tr_group1$column))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
theme(legend.text=element_text(size=7),legend.position="bottom",
axis.text.x=element_text(size=8,angle=45,vjust=0.5,color=color_idx),
axis.text.y=element_text(size=8,color=color_idx))
color_idx <- (color_table$color)[which(c(1:160)%%4==1)]
ggplot(df_GRIDY_tr_group1,aes(x=as.factor(row),y=as.factor(column),
fill=value,color=ROI))+
geom_tile()+
scale_fill_gradient2(name="Value",low=colorRampPalette(brewer.pal(3,"Set1"))(3)[2],
high=colorRampPalette(brewer.pal(3,"Set1"))(3)[1]) +
scale_fill_manual(name="Network",
labels=c("dfm","fp","co","sm","cb","oc"),
breaks=c("red","blue","green","purple","orange","brown"),
values=c("red","blue","green","purple","orange","brown")) +
scale_y_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$row)),
breaks = unique(as.factor(df_GRIDY_tr_group1$row))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
scale_x_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$column)),
breaks = unique(as.factor(df_GRIDY_tr_group1$column))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
theme(legend.text=element_text(size=7),legend.position="bottom",
axis.text.x=element_text(size=8,angle=45,vjust=0.5,color=color_idx),
axis.text.y=element_text(size=8,color=color_idx))
df_GRIDY_tr_group1
ggplot(df_GRIDY_tr_group1,aes(x=as.factor(row),y=as.factor(column),
fill=value,color=ROI))+
geom_tile()+
scale_fill_gradient2(name="Value",low=colorRampPalette(brewer.pal(3,"Set1"))(3)[2],
high=colorRampPalette(brewer.pal(3,"Set1"))(3)[1]) +
scale_fill_manual(name="Network",
labels=c("dfm","fp","co","sm","cb","oc"),
breaks=c("red","blue","green","purple","orange","brown"),
values=c("red","blue","green","purple","orange","brown")) +
scale_y_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$row)),
breaks = unique(as.factor(df_GRIDY_tr_group1$row))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
scale_x_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$column)),
breaks = unique(as.factor(df_GRIDY_tr_group1$column))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
theme(legend.text=element_text(size=7),legend.position="bottom",
axis.text.x=element_text(size=8,angle=45,vjust=0.5,color=color_idx),
axis.text.y=element_text(size=8,color=color_idx))
color_table$ROI
color_table$color
color_table$color[color_table$ROI]
# Plotting: This produces Figure 10
df_GRIDY_tr_group1 <- data.frame(value=as.vector(GRIDY_tr_group1[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160),
ROI=rep(color_table$ROI,160))
df_GRIDY_tr_group2 <- data.frame(value=as.vector(GRIDY_tr_group2[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160),
ROI=rep(color_table$ROI,160))
df_GRIDY_error_group1 <- data.frame(value=as.vector(GRIDY_error_group1[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160),
ROI=rep(color_table$ROI,160))
df_GRIDY_error_group2 <- data.frame(value=as.vector(GRIDY_error_group2[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160),
ROI=rep(color_table$ROI,160))
df_GRIDY_tr_group1$row <- factor(df_GRIDY_tr_group1$row,levels=unique(df_GRIDY_tr_group1$row))
df_GRIDY_tr_group2$row <- factor(df_GRIDY_tr_group2$row,levels=unique(df_GRIDY_tr_group2$row))
df_GRIDY_error_group1$row <- factor(df_GRIDY_error_group1$row,levels=unique(df_GRIDY_error_group1$row))
df_GRIDY_error_group2$row <- factor(df_GRIDY_error_group2$row,levels=unique(df_GRIDY_error_group2$row))
df_GRIDY_tr_group1$column <- factor(df_GRIDY_tr_group1$column,levels=unique(df_GRIDY_tr_group1$column))
df_GRIDY_tr_group2$column <- factor(df_GRIDY_tr_group2$column,levels=unique(df_GRIDY_tr_group2$column))
df_GRIDY_error_group1$column <- factor(df_GRIDY_error_group1$column,levels=unique(df_GRIDY_error_group1$column))
df_GRIDY_error_group2$column <- factor(df_GRIDY_error_group2$column,levels=unique(df_GRIDY_error_group2$column))
df_GRIDY_tr_group1$ROI <- factor(df_GRIDY_tr_group1$ROI,levels=unique(df_GRIDY_tr_group1$ROI))
df_GRIDY_tr_group2$ROI <- factor(df_GRIDY_tr_group2$ROI,levels=unique(df_GRIDY_tr_group2$ROI))
df_GRIDY_error_group1$ROI <- factor(df_GRIDY_error_group1$ROI,levels=unique(df_GRIDY_error_group1$ROI))
df_GRIDY_error_group2$ROI <- factor(df_GRIDY_error_group2$ROI,levels=unique(df_GRIDY_error_group2$ROI))
ggplot(df_GRIDY_tr_group1,aes(x=as.factor(row),y=as.factor(column),
fill=value,color=ROI))+
geom_tile()+
scale_fill_gradient2(name="Value",low=colorRampPalette(brewer.pal(3,"Set1"))(3)[2],
high=colorRampPalette(brewer.pal(3,"Set1"))(3)[1]) +
scale_fill_manual(name="Network",
labels=c("dfm","fp","co","sm","cb","oc"),
breaks=c("red","blue","green","purple","orange","brown"),
values=c("red","blue","green","purple","orange","brown")) +
scale_y_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$row)),
breaks = unique(as.factor(df_GRIDY_tr_group1$row))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
scale_x_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$column)),
breaks = unique(as.factor(df_GRIDY_tr_group1$column))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
theme(legend.text=element_text(size=7),legend.position="bottom",
axis.text.x=element_text(size=8,angle=45,vjust=0.5,color=color_idx),
axis.text.y=element_text(size=8,color=color_idx))
df_GRIDY_error_group1$ROI
color_table$ROI
color_table$color
# Plotting: This produces Figure 10
df_GRIDY_tr_group1 <- data.frame(value=as.vector(GRIDY_tr_group1[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160),
ROI=rep(color_table$color,160))
df_GRIDY_tr_group2 <- data.frame(value=as.vector(GRIDY_tr_group2[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160),
ROI=rep(color_table$color,160))
df_GRIDY_error_group1 <- data.frame(value=as.vector(GRIDY_error_group1[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160),
ROI=rep(color_table$color,160))
df_GRIDY_error_group2 <- data.frame(value=as.vector(GRIDY_error_group2[color_table$ROI,color_table$ROI]),
row = rep(color_table$ROI,each=1,160),
column = rep(color_table$ROI,each=160),
ROI=rep(color_table$color,160))
df_GRIDY_tr_group1$row <- factor(df_GRIDY_tr_group1$row,levels=unique(df_GRIDY_tr_group1$row))
df_GRIDY_tr_group2$row <- factor(df_GRIDY_tr_group2$row,levels=unique(df_GRIDY_tr_group2$row))
df_GRIDY_error_group1$row <- factor(df_GRIDY_error_group1$row,levels=unique(df_GRIDY_error_group1$row))
df_GRIDY_error_group2$row <- factor(df_GRIDY_error_group2$row,levels=unique(df_GRIDY_error_group2$row))
df_GRIDY_tr_group1$column <- factor(df_GRIDY_tr_group1$column,levels=unique(df_GRIDY_tr_group1$column))
df_GRIDY_tr_group2$column <- factor(df_GRIDY_tr_group2$column,levels=unique(df_GRIDY_tr_group2$column))
df_GRIDY_error_group1$column <- factor(df_GRIDY_error_group1$column,levels=unique(df_GRIDY_error_group1$column))
df_GRIDY_error_group2$column <- factor(df_GRIDY_error_group2$column,levels=unique(df_GRIDY_error_group2$column))
df_GRIDY_tr_group1$ROI <- factor(df_GRIDY_tr_group1$ROI,levels=unique(df_GRIDY_tr_group1$ROI))
df_GRIDY_tr_group2$ROI <- factor(df_GRIDY_tr_group2$ROI,levels=unique(df_GRIDY_tr_group2$ROI))
df_GRIDY_error_group1$ROI <- factor(df_GRIDY_error_group1$ROI,levels=unique(df_GRIDY_error_group1$ROI))
df_GRIDY_error_group2$ROI <- factor(df_GRIDY_error_group2$ROI,levels=unique(df_GRIDY_error_group2$ROI))
ggplot(df_GRIDY_tr_group1,aes(x=as.factor(row),y=as.factor(column),
fill=value,color=ROI))+
geom_tile()+
scale_fill_gradient2(name="Value",low=colorRampPalette(brewer.pal(3,"Set1"))(3)[2],
high=colorRampPalette(brewer.pal(3,"Set1"))(3)[1]) +
scale_fill_manual(name="Network",
labels=c("dfm","fp","co","sm","cb","oc"),
breaks=c("red","blue","green","purple","orange","brown"),
values=c("red","blue","green","purple","orange","brown")) +
scale_y_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$row)),
breaks = unique(as.factor(df_GRIDY_tr_group1$row))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
scale_x_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$column)),
breaks = unique(as.factor(df_GRIDY_tr_group1$column))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
theme(legend.text=element_text(size=7),legend.position="bottom",
axis.text.x=element_text(size=8,angle=45,vjust=0.5,color=color_idx),
axis.text.y=element_text(size=8,color=color_idx))
df_GRIDY_error_group1$ROI
?scale_ggplot(df_GRIDY_tr_group1,aes(x=as.factor(row),y=as.factor(column),
fill=value,color=ROI))+
geom_tile()+
scale_fill_gradient2(name="Value",low=colorRampPalette(brewer.pal(3,"Set1"))(3)[2],
high=colorRampPalette(brewer.pal(3,"Set1"))(3)[1]) +
scale_color_manual(name="Network",
labels=c("dfm","fp","co","sm","cb","oc"),
breaks=c("red","blue","green","purple","orange","brown"),
values=c("red","blue","green","purple","orange","brown")) +
scale_y_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$row)),
breaks = unique(as.factor(df_GRIDY_tr_group1$row))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
scale_x_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$column)),
breaks = unique(as.factor(df_GRIDY_tr_group1$column))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
theme(legend.text=element_text(size=7),legend.position="bottom",
axis.text.x=element_text(size=8,angle=45,vjust=0.5,color=color_idx),
axis.text.y=element_text(size=8,color=color_idx))
ggplot(df_GRIDY_tr_group1,aes(x=as.factor(row),y=as.factor(column),
fill=value,color=ROI))+
geom_tile()+
scale_fill_gradient2(name="Value",low=colorRampPalette(brewer.pal(3,"Set1"))(3)[2],
high=colorRampPalette(brewer.pal(3,"Set1"))(3)[1]) +
scale_color_manual(name="Network",
labels=c("dfm","fp","co","sm","cb","oc"),
breaks=c("red","blue","green","purple","orange","brown"),
values=c("red","blue","green","purple","orange","brown")) +
scale_y_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$row)),
breaks = unique(as.factor(df_GRIDY_tr_group1$row))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
scale_x_discrete(name="ROI labels",
limits = levels(as.factor(df_GRIDY_tr_group1$column)),
breaks = unique(as.factor(df_GRIDY_tr_group1$column))[which(c(1:160)%%4==1)],
labels = voxel_name_table$ROI_label[color_table$ROI][which(c(1:160)%%4==1)])+
theme(legend.text=element_text(size=7),legend.position="bottom",
axis.text.x=element_text(size=8,angle=45,vjust=0.5,color=color_idx),
axis.text.y=element_text(size=8,color=color_idx))
